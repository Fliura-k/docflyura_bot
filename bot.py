import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import openai

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

openai.api_key = OPENAI_API_KEY

@dp.message_handler(commands=["start", "help"])
async def send_welcome(message: types.Message):
    await message.reply("üëã –ü—Ä–∏–≤–µ—Ç! –Ø DocFlyura Assistant Bot. –ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å –ø–æ –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏–∏, –ø–µ–ø—Ç–∏–¥–∞–º –∏–ª–∏ anti-age!")

@dp.message_handler()
async def handle_message(message: types.Message):
    user_text = message.text
    
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=[{"role": "system", "content": "–¢—ã DocFlyura Assistant ‚Äì —ç–∫—Å–ø–µ—Ä—Ç –≤ –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏–∏, –ø–µ–ø—Ç–∏–¥–æ–ª–æ–≥–∏–∏ –∏ –ø—Ä–µ–≤–µ–Ω—Ç–∏–≤–Ω–æ–π –º–µ–¥–∏—Ü–∏–Ω–µ."},
                      {"role": "user", "content": user_text}]
        )
        answer = response.choices[0].message["content"]
        await message.reply(answer)
    except Exception as e:
        await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI API.")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
